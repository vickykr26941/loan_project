

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

train_df = pd.read_csv('/content/drive/MyDrive/loan/train_ctrUa4K.csv')

train_df.head()

train_df.isnull().sum()

df = train_df.copy()

for feature in df.columns:
  df = df.copy()
  if df[feature].dtypes=='O':
    print(train_df[feature].value_counts())
    print('---------------------------------')

df = df.drop('Loan_ID',axis=1)

df.head()

df['Gender'].fillna('Male',inplace=True)

df.dtypes

df['Dependents'].fillna('0',inplace=True)

df['Self_Employed'].fillna('No',inplace=True)

df['LoanAmount'].mean()

df['LoanAmount'].fillna(146.41,inplace=True)

df['Loan_Amount_Term'].mean()

df['Loan_Amount_Term'].fillna(342.0,inplace=True)

df['Credit_History'].mode()

df['Credit_History'].fillna(1.0,inplace=True)

df.isnull().sum()

df['Married'].fillna('Yes',inplace=True)

df = df.copy()

df['Dependents'].replace({'3+':3},inplace=True)

df['Dependents'] = df['Dependents'].astype(int)

df.dtypes

df['Gender'].replace({'Male':1,'Female':0},inplace=True)

df['Married'].replace({'Yes':1,'No':0},inplace=True)

df['Education'].replace({'Graduate':1,'Not Graduate':0},inplace=True)

df['Self_Employed'].replace({'Yes':0,'No':1},inplace=True)

df['Property_Area'].replace({'Semiurban':2,'Urban':1,'Rural':0},inplace=True)

df['Loan_Status'].replace({'Y':1,'N':0},inplace=True)

df.head()

import seaborn as sns

sns.pairplot(df)

for feature in df.columns:
  
  sns.distplot(df[feature],bins=20)

from sklearn.preprocessing import StandardScaler
sk=StandardScaler()

X=df.drop('Loan_Status',axis=1)
y=df['Loan_Status']

from sklearn.model_selection import train_test_split

x_train,x_test,y_train,y_test = train_test_split(X,y,test_size=0.2,random_state=123)

x_train = sk.fit_transform(x_train)
x_test = sk.transform(x_test)

from sklearn.linear_model import LogisticRegression
from sklearn.metrics import f1_score,accuracy_score,roc_auc_score

lr=LogisticRegression(max_iter=1000,random_state=123)
lr.fit(x_train,y_train)

print(lr.score(x_train,y_train))
print(lr.score(x_test,y_test))

y_train_pred = lr.predict(x_train)
y_pred=lr.predict(x_test)
print("F1 score on training dataset : ",f1_score(y_train,y_train_pred))
print("F1-score on test dataset : ",f1_score(y_test,y_pred))

y_prob_train = lr.predict_proba(x_train)
y_prob_test = lr.predict_proba(x_test)

print("roc-acu score on training dataset : ",roc_auc_score(y_train,y_prob_train[:,1]))
print("roc-acu score on test dataset : ",roc_auc_score(y_test,y_prob_test[:,1]))

from sklearn.neighbors import KNeighborsClassifier 
knn = KNeighborsClassifier(n_neighbors=5)
knn.fit(x_train,y_train)

print(knn.score(x_train,y_train))
print(knn.score(x_test,y_test))

from sklearn.ensemble import RandomForestClassifier
classifier = RandomForestClassifier(n_estimators=20)
classifier.fit(x_train, y_train)

print(classifier.score(x_train,y_train))
print(classifier.score(x_test,y_test))

import pickle
filename = 'loan-prediction-lrc-model.pkl'
pickle.dump(lr, open(filename, 'wb'))

